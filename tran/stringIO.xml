<?xml version="1.0" encoding="Latin-1"?>
<categoria>servizi di stringa </categoria><!-- # tag <descrizione> contiene le voci per la tabella di riepilogo iniziale -->
<!-- # tag <titolo_1> titolo principale -->
<!-- # tag <titolo_1> titolo principale -->
<!-- tag <testo_normale> contiene il testo normale dell'articolo -->
<!-- tag <titolo_2> contiene il testo per l'intestazione di un paragrafo -->
<!-- tag <py_code> contiene il testo che rappresenta delle istruzioni python -->
<!-- tag <py_output> contiene il testo che rappresenta l'outpuy di uno script python -->
<!-- tag <vedi_anche> contiene il testo che rappresentano i riferimenti esterni -->
<documento_tradotto>
<titolo_1>
StringIO e cStringIO - Lavorare con i buffer di testo usando le API tipo file
</titolo_1>
<descrizione>
Lavorare con i buffer di testo usando le API tipo file
StringIO: 1.4, cStringIO: 1.5
</descrizione>
<testo_normale>
La classe <strong>StringIO</strong> fornisce comodi strumenti per lavorare con del testo in memoria usando le API di file (read, write, ecc.). Ci sono due implementazioni distinte. Il modulo cStringIO è scritto in C per privilegiare la velocità, mentre il modulo StringIO è scritto in Python per privilegiare la portabilità. L'uso di cStringIO per costruire grandi stringhe può offrire un risparmio nelle prestazioni rispetto ad altre tecniche di concatenazione di stringhe.
</testo_normale>
<titolo_2>
Esempio
</titolo_2>
<testo_normale>
Ecco alcuni semplici esempi standard circa l'uso dei buffer di StringIO:
</testo_normale>
<py_code>
# Trovare la miglior implementazione disponibile su questa piattaforma
try:
	from cStringIO import StringIO
except:
	from StringIO import StringIO

# Scrivere in un buffer
output = StringIO()
output.write('Questo va nel buffer. ')
print >>output, 'Ed anche questo.'

# Recuperare i valori scritti
print output.getvalue()

output.close() # scaricare il buffer dalla memoria

# Iniizializzare un buffer per la lettura
input = StringIO('Valore iniziale per il buffer in lettura')

# Leggere dal buffer
print input.read()
</py_code>
<testo_normale>
Questo esempio usa ${sbk}read()${ebk}, ma naturalmente sono disponibili anche i metodi ${sbk}readline()${ebk} e ${sbk}readlines()${ebk}. La classe StringIO fornisce anche un metodo seek() così che sia possibile spostarsi all'interno del buffer mentre si sta leggendo, la qual cosa può essere utile per risalire il buffer se si sta usando una qualche forma di algoritmo di parsing look-ahead.
</testo_normale>
<testo_normale>
Le applicazioni nel mondo reale di StringIO includono uno stack di una applicazione web dove le varie parti dello stack possono aggiungere testo alla risposta, oppure il testare il risultato generato da parti di un programma che tipicamente scrivono in un file.
</testo_normale>
<testo_normale>
L'applicazione che stiamo realizzando al lavoro comprende una interfaccia allo shell scripting nella forma di parecchi programmi da riga comando. Alcuni di questi programmi sono responsabili del recupero di dati dal database e dello scarico sulla console (sia per mostrarlo all'utente, oppure affinchè il testo possa servire come input per un altro comando). I comandi condividono un insieme di plugin di formattazione per produrre una rappresentazione testuale di un oggetto in svariati modi (XML, sintassi bash, leggibili, ecc). Visto che i formattatori in genere scrivono sullo standard output, il test dei risulati risulterebbe un tantino complicato senza il modulo StringIO. L'uso di StringIO per intercettare l'output del formattatore fornisce un facile modo per raccogliere l'output in memoria per confrontarlo con i risultati che ci si aspetta.
</testo_normale>
<vedi_anche>
http://docs.python.org/lib/module-StringIO.html|StringIO|La documentazione standard della libreria per questo modulo
http://effbot.org/librarybook/stringio.htm|Il modulo StringIO ::: www.effbot.org|Gli esempi di effbot con StringIO
http://www.skymind.com/%7Eocrow/python_string/|Efficiente concatenazione di stringhe in Python|Esamina diversi metodi per combinare le stringhe ed i loro relativi pregi.
</vedi_anche>
</documento_tradotto>
