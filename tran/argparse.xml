<?xml version="1.0" encoding="Latin-1"?>
<categoria>servizi generici di sistema operativo </categoria><!-- # tag <descrizione> contiene le voci per la tabella di riepilogo iniziale -->
<!-- # tag <titolo_1> titolo principale -->
<!-- tag <testo_normale> contiene il testo normale dell'articolo -->
<!-- tag <titolo_2> contiene il testo per l'intestazione di un paragrafo -->
<!-- tag <py_code> contiene il testo che rappresenta delle istruzioni python -->
<!-- tag <py_output> contiene il testo che rappresenta l'output di uno script python -->
<!-- tag <vedi_anche> contiene il testo che rappresentano i riferimenti esterni -->
<!-- tag <lista> ogni riga all'interno del tag rappresenta una riga di una lista non ordinata'-->
<documento_tradotto>
<titolo_1>
argparse - Analizzatore di opzioni e di argomenti di riga di comando
</titolo_1>
<descrizione>
Analizza le opzioni e gli argomenti di riga di comando
2.7 e superiore
</descrizione>
<testo_normale>
Il modulo <strong>argparse</strong> è stato aggiunto a Python 2.7 come rimpiazzo per <a href='optparse.html'>optparse</a>. L'implementazione di <strong>argparse</strong> supporta caratteristiche che non sarebbe stato facile aggiungere ad <a href='optparse.html'>optparse</a>, e che avrebbe richiesto modifiche all'API incongruenti con le versioni precedenti; così è stato portato nella libreria un nuovo modulo. <a href='optparse.html'>optparse</a> è ancora supportato, ma difficilmente riceverà nuove caratteristiche.
</testo_normale>
<titolo_2>
Confronto con optparse
</titolo_2>
<testo_normale>
L'API per <strong>argparse</strong> è simile a quella fornita da <a href='optparse.html'>optparse</a>, ed in molti casi potrà essere usato direttamente come rimpiazzo aggiornando i nomi delle classi ed i metodi usati. Ci sono pochi punti nei quali non è stato possibile preservare la compatibilità diretta visto che, comunque, sono state aggiunte nuove funzionalità.
</testo_normale>
<testo_normale>
Occorrerà decidere se aggiornare i programmi esistenti caso per caso. Se si è scritto del codice supplementare per superare le limitazioni di <a href='optparse.html'>optparse</a>, si potrebbe aggiornare per ridurre la quantità di codice che occorre manutenere. I nuovi programmi probabilmente dovrebbero usare <strong>argparse</strong>, se è disponibile su tutte le piattaforme di sviluppo.    
</testo_normale>
<titolo_2>
Impostare un Parser    
</titolo_2>
<testo_normale>
Quando si usa <strong>argparse</strong>, il primo passo consiste nel creare l'oggetto parser, quindi dirgli quali argomenti deve attendersi. Il parser può poi essere usato per elaborare gli argomenti di riga di comando quando il programma viene eseguito.
</testo_normale>
<testo_normale>
La classe parser è ${sbk}ArgumentParser${ebk}. Il costruttore richiede diversi argomenti per impostare le descrizioni usate nel testo di aiuto per il programma e per altri comportamenti ed impostazioni globali.
</testo_normale>
<py_code>
import argparse
parser = argparse.ArgumentParser(description='Questo è un programma di esempio di PyMOTW')
</py_code>
<titolo_2>
Definire gli argomenti
</titolo_2>
<testo_normale>
Si definisce <strong>argparse</strong> come una completa libreria per l'elaborazione degli argomenti. Essi possono attivare diverse azioni, specificate dall'argomento argomento <em>action</em> di ${sbk}add_argument()${ebk}. Le azioni supportate comprendono la memorizzazione del argomento (singolarmente o come parte di una lista), la memorizzazione di un valore costante quando viene rilevato l'argomento (compresa la gestione speciale per i valori true/false degli swith booleani), il conteggio del numero di volte nelle quali viene rilevato un argomento e la chiamata di un callback.
</testo_normale>
<testo_normale>
L'azione predefinita è la memorizzazione del valore del argomento. In questo caso, se viene passato un tipo, il valore viene convertito in quel tipo prima di essere memorizzato. Se viene passato l'argomento <em>dest</em> il valore viene salvato come attributo di quel nome nell'oggetto Namespace restituito quando la riga di comando viene analizzata.
</testo_normale>
<titolo_2>
Analizzare una Riga di Comando
</titolo_2>
<testo_normale>
Una volta che tutti gli argomenti sono definiti, si può analizzare la riga di comando passando una sequenza di stringhe di argomento a ${sbk}parse_args()${ebk}. Nella modalità predefinita, gli argomenti sono recuperati da ${sev}sys.argv[1:]${eev}, ma si può passare anche una propria lista. Le opzioni sono elaborate usando la sintassi GNU/POSIX, in modo che opzioni e valori di argomenti possano essere mescolati nella sequenza.
</testo_normale>
<testo_normale>
Il valore restituito da ${sbk}parse_args()${ebk} è un <strong>Namespace</strong> che contiene gli argomenti del comando. L'oggetto contiene i valori degli argomenti come attributi, in modo che se l' argomento ${sev}dest${eev} è ${sev}"myoption"${eev}, al suo valore si potrà accedere come ${sev}args.myoption${eev}
</testo_normale>
<titolo_2>
Semplici Esempi
</titolo_2>
<testo_normale>
Ecco un semplice esempio con tre diverse opzioni: una booleana (${sev}-a${eev}), una stringa (${sev}-b${eev}) ed un intero (${sev}-c${eev})
</testo_normale>
<py_code>
import argparse

parser = argparse.ArgumentParser(description='Breve applicazione di esempio')

parser.add_argument('-a', action="store_true", default=False)
parser.add_argument('-b', action="store", dest="b")
parser.add_argument('-c', action="store", dest="c", type=int)

print parser.parse_args(['-a', '-bval', '-c', '3'])
</py_code>
<testo_normale>
Ci sono modi diversi per passare valori alle opzioni a carattere singolo: l'esempio di cui sopra usa due forme diverse; ${sev}-bval${eev} e ${sev}-c val${eev}
</testo_normale>
<py_output>
$ python argparse_short.py

Namespace(a=True, b='val', c=3)
</py_output>
<testo_normale>
Il tipo del valore associato a ${sev}'c'${eev}.nell'output è un intero, visto che ad ${sbk}ArgumentParser${ebk} è stato detto di convertire l'argomento prima di memorizzarlo.
</testo_normale>
<testo_normale>
I nomi di opzione "lunghi", con più di un carattere nel proprio nome, sono gestite allo stesso modo
</testo_normale>
<py_code>
import argparse

parser = argparse.ArgumentParser(description='Esempio con nomi di opzione lunghi')

parser.add_argument('--noarg', action="store_true", default=False)
parser.add_argument('--witharg', action="store", dest="witharg")
parser.add_argument('--witharg2', action="store", dest="witharg2", type=int)

print parser.parse_args([ '--noarg', '--witharg', 'val', '--witharg2=3' ])
</py_code>
<testo_normale>
Ed i risultati sono simili:
</testo_normale>
<py_output>
$ python argparse_long.py

Namespace(noarg=True, witharg='val', witharg2=3)
</py_output>
<testo_normale>
Un'area nella quale <strong>argparse</strong> differisce da <a href='optparse.html'>optparse</a> è il trattamento dei valori degli argomenti non opzionali. Mentre <a href='optparse.html'>optparse</a> rimane ancorato all'analisi dell'opzione, <strong>argparse</strong> è uno strumento completo per l'analisi degli argomenti di riga di comando, e gestisce bene anche gli argomenti non opzionali.
</testo_normale>
<py_code>
import argparse

parser = argparse.ArgumentParser(description='Esempio con argomenti non associati ad opzione')

parser.add_argument('count', action="store", type=int)
parser.add_argument('units', action="store")

print parser.parse_args()
</py_code>
<testo_normale>
In questo esempio, l'argomento <em>count</em> è un intero, e l'argomento <em>units</em> viene salvato come stringa. Se entrambi non vengono passati nella riga di comando, oppure il valore fornito non può essere convertito nel tipo corretto, viene riportato un errore.
</testo_normale>
<py_output>
$ python argparse_arguments.py 3 inches
amespace(count=3, units='inches')

$ python argparse_arguments.py some inches

usage: argparse_arguments.py [-h] count units
argparse_arguments.py: error: argument count: invalid int value: 'some'

$ python argparse_arguments.py

usage: argparse_arguments.py [-h] count units
argparse_arguments.py: error: too few arguments
</py_output>
<sottotitolo>
Azioni degli argomenti
</sottotitolo>
<testo_normale>
Ci sono sei azioni built-in che possono essere attivate quando viene rilevato un argomento:
</testo_normale>
<deflist>
${sev}store${eev}|Conserva il valore, dopo averlo opzionalmente convertito in un tipo diverso. Questa è l'azione predefinita intrapresa se non viene specificato diversamente
${sev}store_const${eev}|Conserva un valore definito come parte di una specifica di argomento piuttosto che un valore che proviene dal argomento in analisi. Tipicamente usato per implementare dei flag di riga di comando che non sono booleani.
${sev}store_true${eev} / ${sev}store_false${eev}|Conserva il valore booleano appropriato. Queste azioni sono usate per implementare degli switch booleani
${sev}append${eev}|Conserva il valore in una lista. I valori multipli vengono conservati se il argomento è ripetuto.
${sev}append_const${eev}|Conserva un valore definito nella specifica dell'argomento in una lista
${sev}version${eev}|Stampa i dettagli della versione del programma quindi esce.
</deflist>
<py_code>
import argparse

parser = argparse.ArgumentParser()

parser.add_argument('-s', action='store', dest='valore_semplice',
                    help='Conserva un semplice valore')

parser.add_argument('-c', action='store_const', dest='valore_costante',
                    const='value-to-store',
                    help='Conserva un valore costante')

parser.add_argument('-t', action='store_true', default=False,
                    dest='switch_booleano',
                    help='Imposta uno switch a true')
parser.add_argument('-f', action='store_false', default=False,
                    dest='switch_booleano',
                    help='Imposta uno switch a false')

parser.add_argument('-a', action='append', dest='collezione',
                    default=[],
                    help='Aggiunge valori ripetuti ad una lista',
                    )

parser.add_argument('-A', action='append_const', dest='collezione_costanti',
                    const='valore-1-da-aggiungere',
                    default=[],
                    help='Aggiunge valori diversi ad una lista')
parser.add_argument('-B', action='append_const', dest='collezione_costanti',
                    const='valore-2-da-aggiungere',
                    help='Aggiunge valori diversi ad una lista')

parser.add_argument('--version', action='version', version='%(prog)s 1.0')

results = parser.parse_args()
print 'valore_semplice     =', results.valore_semplice
print 'valore_costante     =', results.valore_costante
print 'switch_booleano     =', results.switch_booleano
print 'collezione          =', results.collezione
print 'collezione_costanti =', results.collezione_costanti
$ python argparse_action.py -h    
</py_code>
<py_output>
$ python argparse_action.py -h
usage: argparse_action.py [-h] [-s valore_semplice] [-c] [-t] [-f]
                          [-a collezione] [-A] [-B] [--version]

optional arguments:
  -h, --help          show this help message and exit
  -s valore_semplice  Conserva un semplice valore
  -c                  Conserva un valore costante
  -t                  Imposta uno switch a true
  -f                  Imposta uno switch a false
  -a collezione       Aggiunge valori ripetuti ad una lista
  -A                  Aggiunge valori diversi ad una lista
  -B                  Aggiunge valori diversi ad una lista
  --version           show program's version number and exit

$ python argparse_action.py -s value
valore_semplice     = value
valore_costante     = None
switch_booleano     = False
collezione          = []
collezione_costanti = []

$ python argparse_action.py -c
valore_semplice     = None
valore_costante     = value-to-store
switch_booleano     = False
collezione          = []
collezione_costanti = []

$ python argparse_action.py -t
valore_semplice     = None
valore_costante     = None
switch_booleano     = True
collezione          = []
collezione_costanti = []

$ python argparse_action.py -f
valore_semplice     = None
valore_costante     = None
switch_booleano     = False
collezione          = []
collezione_costanti = []

$ python argparse_action.py -a uno -a due -a tre
valore_semplice     = None
valore_costante     = None
switch_booleano     = False
collezione          = ['uno', 'due', 'tre']
collezione_costanti = []

$ python argparse_action.py -B -A
valore_semplice     = None
valore_costante     = None
switch_booleano     = False
collezione          = []
collezione_costanti = ['value-2-da-aggiungere', 'valore-1-da-aggiungere']

$ python argparse_action.py --version
argparse_action.py 1.0
</py_output>
<titolo_2>
Prefissi di Opzione
</titolo_2>
<testo_normale>
La sintassi predefinita per le opzioni è basata sulla convenzione Unix di identificare gli switch da riga di comando usando il prefisso "-". <strong>argparse</strong> supporta altri prefissi, quindi si può rendere il proprio programma conferme ai valori predefiniti della piattaforma locale (es.: usare "/" in Windows) oppure seguire una diversa convenzione.
</testo_normale>
<testo_normale>

</testo_normale>
<py_code>
import argparse

parser = argparse.ArgumentParser(description='Modifica i caratteri prefisso opzione',
                                 prefix_chars='-+/',
                                 )

parser.add_argument('-a', action="store_false", default=None,
                    help='Disattiva A',
                    )
parser.add_argument('+a', action="store_true", default=None,
                    help='Attiva A',
                    )
parser.add_argument('//noarg', '++noarg', action="store_true", default=False)

print parser.parse_args()
</py_code>
<testo_normale>
Impostare il parametro ${sev}prefix_chars${eev} per <strong>ArgumentParser</strong> ad una stringa che contiene tutti i caratteri ammessi che dovrebbero costituire una opzione. E' importante comprendere che, sebbene ${sev}prefix_chars${eev} determini i caratteri concessi per gli switch, la definizione dei singoli argomenti specifica la sintassi per un certo switch. Questo fornisce un controllo esplicito su quali opzioni usino prefissi diversi come alias (come potrebbe essere il caso per la sintassi di una riga di comando indipendente dalla piattaforma) o per alternative (es. usare &quot;+&quot; per indicare l'attivazione di uno switch e &quot;-&quot; per la disattivazione). Nell'esempio qui sopra, ${sev}+a${eev} e ${sev}-1${eev} sono argomenti distinti, e <pwevm>//noarg</pwevm> può anche essere passato come ${sev}++noarg${eev} ma non ${sev}--noarg${eev}.
</testo_normale>
<py_output>
$ python argparse_prefix_chars.py -h

usage: argparse_prefix_chars.py [-h] [-a] [+a] [//noarg]

Modifica i caratteri prefisso opzione

optional arguments:
  -h, --help        show this help message and exit
  -a                Disattiva A
  +a                Attiva A
  //noarg, ++noarg

$ python argparse_prefix_chars.py +a

Namespace(a=True, noarg=False)

$ python argparse_prefix_chars.py -a

Namespace(a=False, noarg=False)

$ python argparse_prefix_chars.py //noarg

Namespace(a=None, noarg=True)

$ python argparse_prefix_chars.py ++noarg 

Namespace(a=None, noarg=True)

$ python argparse_prefix_chars.py --noarg 

usage: argparse_prefix_chars.py [-h] [-a] [+a] [//noarg]
argparse_prefix_chars.py: error: unrecognized arguments: --noarg
</py_output>
<titolo_2>
Origini degli argomenti
</titolo_2>
<testo_normale>
Negli esempi fino a qui, l'elenco degli argomenti forniti al parser provenivano da un elenco passato esplicitamente, oppure recuperato in modo implicito da ${sev}sys.argv${eev}. Passare esplicitamente un elenco è utile quando si usa <strong>argparse</strong> per elaborare istruzioni tipo riga di comando che non provengono dalla riga di comando stessa (tipo da un file di configurazione).
</testo_normale>
<py_code>
import argparse
from ConfigParser import ConfigParser
import shlex

parser = argparse.ArgumentParser(description='Breve applicazione di esempio')

parser.add_argument('-a', action="store_true", default=False)
parser.add_argument('-b', action="store", dest="b")
parser.add_argument('-c', action="store", dest="c", type=int)

config = ConfigParser()
config.read('argparse_witH_shlex.ini')
config_value = config.get('cli', 'options')
print 'Config  :', config_value

argument_list = shlex.split(config_value)
print 'Elenco param.:', argument_list

print 'Risultati :', parser.parse_args(argument_list)
</py_code>
<testo_normale>
shlex facilita la divisione della stringa memorizzata nel file di configurazione
</testo_normale>
<py_output>
$ python argparse_with_shlex.py
Config  : -a -b 2
Elenco param.: ['-a', '-b', '2']
Risultati : Namespace(a=True, b='2', c=None)
</py_output>
<testo_normale>
Un'alternativa all'elaborare personalmente il file di configurazione è di dire ad <strong>argparse</strong> come riconoscere un argomento che fa riferimento ad un file di input che contiene un insieme di argomenti da elaborare tramite ${sev}fromfile_prefix_chars${eev}.
</testo_normale>
<py_code>
import argparse
from ConfigParser import ConfigParser
import shlex

parser = argparse.ArgumentParser(description='Breve applicazione di esempio',
                                 fromfile_prefix_chars='@',
                                 )

parser.add_argument('-a', action="store_true", default=False)
parser.add_argument('-b', action="store", dest="b")
parser.add_argument('-c', action="store", dest="c", type=int)

print parser.parse_args(['@argparse_fromfile_prefix_chars.txt'])    
</py_code>
<testo_normale>
Questo esempio si interrompe quando trova un argomento prefissato da <strong>@</strong>, quindi legge il file il cui nome ha ricevuto come argomento per trovare ulteriori argomenti. Ad esempio se il file di input  ${sev}argparse_fromfile_prefix_chars.txt${eev} contiene una serie di argomenti, uno per riga:
</testo_normale>
<py_output>
-a
-b
2
</py_output>
<testo_normale>
L'output prodotto quando viene elaborato il file è:    
</testo_normale>
<py_output>
$ python argparse_fromfile_prefix_chars.py

Namespace(a=True, b='2', c=None)
</py_output>
<titolo_2>
Opzioni Generate Automaticamente
</titolo_2>
<testo_normale>
<strong>argparse</strong> aggiungerà automaticamente le opzioni per generare l'aiuto e mostrare le informazioni per la versione della propria applicazione, se viene opportunamente configurato.
</testo_normale>
<testo_normale>
L' argomento di <strong>ArgumentParser</strong> ${sev}add_help${eev} controlla le opzioni relative all'aiuto.
</testo_normale>
<py_code>
import argparse

parser = argparse.ArgumentParser(add_help=True)

parser.add_argument('-a', action="store_true", default=False)
parser.add_argument('-b', action="store", dest="b")
parser.add_argument('-c', action="store", dest="c", type=int)

print parser.parse_args()    
</py_code>
<testo_normale>
Le opzioni di aiuto (${sev}-h${eev} ed ${sev}--help${eev}) sono aggiunte in modalità predefinita; possono essere disabilitate impostando ${sev}add_help${eev} a <em>false</em>.
</testo_normale>
<py_code>
import argparse

parser = argparse.ArgumentParser(add_help=False)

parser.add_argument('-a', action="store_true", default=False)
parser.add_argument('-b', action="store", dest="b")
parser.add_argument('-c', action="store", dest="c", type=int)

print parser.parse_args()
</py_code>
<testo_normale>
Sebbene ${sev}-h${eev} ed ${sev}--help${eev} siano uno standard defacto per i nomi di opzioni per richiedere aiuto; alcune applicazioni od usi di <strong>argparse</strong> non hanno necessità di fornire un aiuto oppure devono usare questi nomi di opzione per altri scopi
</testo_normale>
<py_output>
$ python argparse_with_help.py -h
usage: argparse_with_help.py [-h] [-a] [-b B] [-c C]

optional arguments:
  -h, --help  show this help message and exit
  -a
  -b B
  -c C

$ python argparse_without_help.py -h
usage: argparse_without_help.py [-a] [-b B] [-c C]
argparse_without_help.py: error: unrecognized arguments: -h
</py_output>
<testo_normale>
Le opzioni di versione (${sev}-v${eev} e ${sev}--version${eev}) sono aggiunte quando ${sev}version${eev} viene impostato nel costruttore di <strong>ArgumentParser</strong>.
</testo_normale>
<py_code>
import argparse

parser = argparse.ArgumentParser(version='1.0')

parser.add_argument('-a', action="store_true", default=False)
parser.add_argument('-b', action="store", dest="b")
parser.add_argument('-c', action="store", dest="c", type=int)

print parser.parse_args()

print 'Questo non viene stampato!'    
</py_code>
<testo_normale>
Entrambi i formati dell'opzione stampano la stringa della versione del programma; poi causano l'uscita immediata.
</testo_normale>
<py_output>
$ python argparse_with_version.py -h
usage: argparse_with_version.py [-h] [-v] [-a] [-b B] [-c C]

optional arguments:
  -h, --help     show this help message and exit
  -v, --version  show program's version number and exit
  -a
  -b B
  -c C

$ python argparse_with_version.py -v
1.0

$ python argparse_with_version.py --version
1.0
</py_output>
<titolo_2>
Organizzazione del Parser
</titolo_2>
<testo_normale>
<strong>argparse</strong> comprende diverse caratteristiche per l'organizzazione dei propri parser di argomenti, per facilitare l'implementazione o per migliorare l'usabilità dell'output dell'aiuto.
</testo_normale>
<sottotitolo>
Condividere Regole di Elaborazione
</sottotitolo>
<testo_normale>
E' comune la necessità di implementare un gruppo di programmi da riga di comando che ricevono tutti un insieme di argomenti, per poi specializzarsi in un qualche modo. Ad esempio, se i tutti i programmi necessitano di una autenticazione dell'utente prima di intraprendere una azione effettiva, potrebbero avere tutti bisogno di supportare le opzioni ${sev}--user${eev} e ${sev}--password${eev}. Piuttosto che aggiungere esplicitamente le opzioni ad ogni ${sev}ArgumentParser${eev}, si può definire un parser "genitore" con le opzioni condivise, poi fare da esso ereditare ai parser dei singoli programmi le sue opzioni.
</testo_normale>
<testo_normale>
Il primo passo è impostare il parser con le definizioni degli argomenti comuni. Visto che ogni utilizzatore del parser genitore vorrà aggiungere le stesse opzioni di aiuto, causando una eccezione, occorre disabilitare la generazione di aiuto automatico nel parser di base.
</testo_normale>
<py_code>
import argparse

parser = argparse.ArgumentParser(add_help=False)

parser.add_argument('--user', action="store")
parser.add_argument('--password', action="store")    
</py_code>
<testo_normale>
Quindi si crea un altro parser con impostato <em>parents</em>;
</testo_normale>
<py_code>
import argparse
import argparse_parent_base

parser = argparse.ArgumentParser(parents=[argparse_parent_base.parser])

parser.add_argument('--local-arg', action="store_true", default=False)

print parser.parse_args()    
</py_code>
<testo_normale>
Ed il programma risultante otterrà tutte e tre le opzioni:
</testo_normale>
<py_output>
$ python argparse_uses_parent.py -h
usage: argparse_uses_parent.py [-h] [--user USER] [--password PASSWORD]
                               [--local-arg]

optional arguments:
  -h, --help           show this help message and exit
  --user USER
  --password PASSWORD
  --local-arg
</py_output>
<titolo_2>
Opzioni in Conflitto    
</titolo_2>
<testo_normale>
L'esempio precedente evidenziava che l'aggiunta di due gestori di argomenti ad un parser che usano lo stesso nome di argomento causano una eccezione. Per modificare il comportamento per la risoluzione dei conflitti si passa <em>conflict_handler</em>. I due gestori built-in sono ${sev}error${eev} (il predefinito) e ${sev}resolve${eev}, il quale sceglie un gestore in base all'ordine nel quale sono stati aggiunti.
</testo_normale>
<py_code>
import argparse

parser = argparse.ArgumentParser(conflict_handler='resolve')

parser.add_argument('-a', action="store")
parser.add_argument('-b', action="store", help='Solo corta')
parser.add_argument('--long-b', '-b', action="store", help='Lunga e corta insieme')

print parser.parse_args(['-h'])
</py_code>
<testo_normale>
Visto che viene usato l'ultimo gestore con uno specifico nome di argomento, in questo esempio l'opzione a carattere singolo ${sev}-b${eev} viene mascherata dall'alias per ${sev}--long-b${eev}.
</testo_normale>
<py_output>
$ python argparse_conflict_handler_resolve.py -h

usage: argparse_conflict_handler_resolve.py [-h] [-a A] [--long-b LONG_B]

optional arguments:
  -h, --help            show this help message and exit
  -a A
  --long-b LONG_B, -b LONG_B
                        Lunga e corta assieme
</py_output>
<testo_normale>
Invertire l'ordine delle chiamate a ${sbk}add_argument()${ebk}, "smaschera" l'opzione a carattere singolo
</testo_normale>
<py_code>
import argparse

parser = argparse.ArgumentParser(conflict_handler='resolve')

parser.add_argument('-a', action="store")
parser.add_argument('-b', action="store", help='Solo corta')
parser.add_argument('--long-b', '-b', action="store", help='Lunga e corta assieme')

print parser.parse_args(['-h'])    </py_code>
<testo_normale>
Ora entrambe le opzioni sono usate insieme    
</testo_normale>
<py_output>
$ python argparse_conflict_handler_resolve.py 

usage: argparse_conflict_handler_resolve.py [-h] [-a A] [--long-b LONG_B]

optional arguments:
  -h, --help            show this help message and exit
  -a A
  --long-b LONG_B, -b LONG_B
                        Lunga e corta assieme
</py_output>
<sottotitolo>
Gruppi di argomenti
</sottotitolo>
<testo_normale>
<strong>argparse</strong> raggruppa le definizioni degli argomenti in "gruppi". Nella modalità predefinita, usa due gruppi, uno per le opzioni ed un altro per i argomenti richiesti basati sula posizione.
</testo_normale>
<py_code>
import argparse

parser = argparse.ArgumentParser(description='Breve semplice applicazione')

parser.add_argument('--optional', action="store_true", default=False)
parser.add_argument('positional', action="store")

print parser.parse_args()    
</py_code>
<testo_normale>
Il raggruppamento viene rispecchiato nelle sezioni separate "positional arguments" ed "optional arguments" nell'output di aiuto:
</testo_normale>
<py_output>
s$ python argparse_default_grouping.py -h
usage: argparse_default_grouping.py [-h] [--optional] positional

Breve semplice applicazione

positional arguments:
  positional

optional arguments:
  -h, --help  show this help message and exit
  --optional
</py_output>
<testo_normale>
Si può modificare il raggruppamento per renderlo più logico nell'aiuto, in mode che le opzioni od i valori collegati siano documentati assieme. L'esempio di opzioni condivise fatto precedentemente potrebbe essere scritto usando un raggruppamento personalizzato in modo che le opzioni di autenticazione siano mostrate assieme nell'aiuto.
</testo_normale>
<testo_normale>
Occorre creare un gruppo "authentication" tramite ${sbk}add_argument_group()${ebk}, quindi si aggiunge ognuna delle opzioni legate all'autenticazione al gruppo, invece del parser di base.
</testo_normale>
<py_code></py_code>
<py_output>
import argparse

parser = argparse.ArgumentParser(add_help=False)

group = parser.add_argument_group('authentication')

group.add_argument('--user', action="store")
group.add_argument('--password', action="store")
</py_output>
<testo_normale>
Il programma che usa gli elenchi basati sul gruppo del genitore li elenca nel valore <em>parents</em>, proprio come prima:
</testo_normale>
<py_code>
import argparse
import argparse_parent_with_group

parser = argparse.ArgumentParser(parents=[argparse_parent_with_group.parser])

parser.add_argument('--local-arg', action="store_true", default=False)

print parser.parse_args()
</py_code>
<testo_normale>
L'output di aiuto ora mostra le opzioni di autenticazione assieme:
</testo_normale>
<py_output>
import argparse
import argparse_parent_with_group

parser = argparse.ArgumentParser(parents=[argparse_parent_with_group.parser])

parser.add_argument('--local-arg', action="store_true", default=False)

print parser.parse_args()
</py_output>
<sottotitolo>
Opzioni a Mutua Esclusione
</sottotitolo>
<testo_normale>
Una tipologia speciale della caratteristica di raggruppamento è la definizione di opzioni mutualmente esclusive, che si ottiene usando ${sbk}add_mutually_exclusive_group()${ebk} invece che ${sbk}add_argument_group()${ebk}.
</testo_normale>
<py_code>
import argparse

parser = argparse.ArgumentParser()

group = parser.add_mutually_exclusive_group()
group.add_argument('-a', action='store_true')
group.add_argument('-b', action='store_true')

print parser.parse_args()
</py_code>
<testo_normale>
<strong>argparse</strong> si occupa della forzatura della mutua esclusività, in modo che solo una delle opzioni dal gruppo possa essere fornita.
</testo_normale>
<py_output>
$ python argparse_mutually_exclusive.py -h
usage: argparse_mutually_exclusive.py [-h] [-a | -b]

optional arguments:
  -h, --help  show this help message and exit
  -a
  -b

$ python argparse_mutually_exclusive.py -a
Namespace(a=True, b=False)

$ python argparse_mutually_exclusive.py -b
Namespace(a=False, b=True)

$ python argparse_mutually_exclusive.py -a -b
usage: argparse_mutually_exclusive.py [-h] [-a | -b]
argparse_mutually_exclusive.py: error: argument -b: not allowed with argument -a
</py_output>
<sottotitolo>
Parser Annidati
</sottotitolo>
<testo_normale>
    
</testo_normale>
<vedi_anche>
http://docs.python.org/lib/module-optparse.html|optparse|La documentazione della libreria standard per questo modulo.
getopt.html|getopt|Il modulo getopt
argparse.html|argparse|Rimpiazzo più recente per optparse.
</vedi_anche>
</documento_tradotto>
</testo_normale>
