<?xml version="1.0" encoding="UTF-8"?>
<categoria>servizi di stringa </categoria><!-- # tag <descrizione> contiene le voci per la tabella di riepilogo iniziale -->
<!-- # tag <titolo_1> titolo principale -->
<!-- # tag <titolo_1> titolo principale -->
<!-- tag <testo_normale> contiene il testo normale dell'articolo -->
<!-- tag <titolo_2> contiene il testo per l'intestazione di un paragrafo -->
<!-- tag <py_code> contiene il testo che rappresenta delle istruzioni python -->
<!-- tag <py_output> contiene il testo che rappresenta l'outpuy di uno script python -->
<!-- tag <vedi_anche> contiene il testo che rappresentano i riferimenti esterni -->
<documento_tradotto>
<titolo_1>
string - Lavorare con il testo
</titolo_1>
<descrizione>
Contiene costanti e classi per lavorare con il testo
2.5
</descrizione>
<testo_normale>
Il modulo string è presente fin dalle prime versioni di Python. Nella versione 2.0 molte delle funzioni precedentemente implementate solo nel modulo sono state spostate come metodi degli oggetti stringa. Sono ancora disponibili le versioni per compatibilità di queste funzioni, ma il loro uso è deprecato ed esse verranno abbandonate in Python 3.0. Il modulo string contiene comunque parecchie costanti e classi  utili per lavorare con oggetti stringa ed unicode e questa discussione si concentrerà su di essi.
</testo_normale>
<titolo_2>
Costanti
</titolo_2>
<testo_normale>
Le costanti nel modulo stringa possono essere usate per specificare categorie di caratteri come ${sbk}ascii_letters${ebk} e ${sbk}digits${ebk}. Alcune delle costanti dipendono dalla localizzazione, come ${sbk}lowercase${ebk}, così che i valori siano modificati per riflettere le impostazioni di lingua dell'utente. Altre tipo ${sbk}hexdigits${ebk} non subiscono mutamenti quando cambia la localizzazione.
</testo_normale>
<py_code>
import string

for n in dir(string):
    if n.startswith('_'):
        continue
    v = getattr(string, n)
    if isinstance(v, basestring):
        print '%s=%s' % (n, repr(v))
        print

</py_code>
<testo_normale>
La maggior parte dei nomi delle costanti sono autoesplicativi (ovviamente per la lingua inglese - n.d.t.).
</testo_normale>
<py_output>
$ python string_constants.py
ascii_letters='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'

ascii_lowercase='abcdefghijklmnopqrstuvwxyz'

ascii_uppercase='ABCDEFGHIJKLMNOPQRSTUVWXYZ'

digits='0123456789'

hexdigits='0123456789abcdefABCDEF'

letters='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'

lowercase='abcdefghijklmnopqrstuvwxyz'

octdigits='01234567'

printable='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n\r\x0b\x0c'

punctuation='!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'

uppercase='ABCDEFGHIJKLMNOPQRSTUVWXYZ'

whitespace='\t\n\x0b\x0c\r '
</py_output>
<titolo_2>
Funzioni
</titolo_2>
<testo_normale>
Ci sono due funzioni che non sono state spostate dal modulo string: ${sbk}capwords()${ebk} trasforma in maiuscolo tutte le iniziali di ogni parola in una stringa.
</testo_normale>
<py_code>
import string

s = 'The quick brown fox jumped over the lazy dog.'

print s
print string.capwords(s)
</py_code>
<testo_normale>
Il risultato è identico a quello che si sarebbe ottenuto chiamando ${sbk}split()${ebk}, trasformando la prima lettera di ogni parola in maiuscolo, quindi chiamando ${sbk}join()${ebk} per unire il risultato.
</testo_normale>
<py_output>
$ python string_capwords.py
The quick brown fox jumped over the lazy dog.
The Quick Brown Fox Jumped Over The Lazy Dog.
</py_output>
<testo_normale>
L'altra funzione crea delle tabelle di trascodifica che possono essere usate con il metodo ${sbk}translate()${ebk} per trasformare un insieme di caratteri in un altro
</testo_normale>
<py_code>
import string

leet = string.maketrans('abegiloprstz', '463611092572')

s = 'The quick brown fox jumped over the lazy dog.'

print s
print s.translate(leet)
</py_code>
<testo_normale>
In questo esempio, alcune lettere sono sostituite dai numeri ad esse corrispondenti nella notazione <a href='http://en.wikipedia.org/wiki/Leet'>I33t</a> 
</testo_normale>
<py_output>
$ python string_maketrans.py
The quick brown fox jumped over the lazy dog.
Th3 qu1ck 620wn f0x jum93d 0v32 7h3 142y d06.
</py_output>
<titolo_2>
Template
</titolo_2>
<testo_normale>
Le stringhe template furono aggiunte in Python 2.4 come parte di <a href='http://www.python.org/dev/peps/pep-0292'>PEP 292</a> e sono da intendersi come un'alternativa alla sintassi di interpolazione built-in. Con l'interpolazione di string.Template, le variabili sono identificate dal nome preceduto da $ (es. ${sbk}$var${ebk}) oppure, se necessario per isolarle dal testo circostante, possono anche essere racchiuse tra parentesi graffe (es. ${sbk}${var}${ebk}).
</testo_normale>
<testo_normale>
L'esempio confronta un semplice template con una impostazione di interpolazione di stringa similare.
</testo_normale>
<py_code>
import string

values = { 'var':'foo' }

t = string.Template("""
$var
$$
${var}iable
""")

print 'TEMPLATE:', t.substitute(values)

s = """
%(var)s
%%
%(var)siable
"""

print 'INTERPLOATION:', s % values
</py_code>
<testo_normale>
Come si vede, in entrambi i casi il carattere trigger - quello che precede il nome di variabile da interpolare - (${sbk}$ ${ebk} oppure ${sbk}% ${ebk}) viene interpretato letteralmente ripetendolo due volte.
</testo_normale>
<py_output>
$ python string_template.py
TEMPLATE:
foo
$
fooiable

INTERPLOATION:
foo
%
fooiable
</py_output>
<testo_normale>
Una differenza chiave tra i template e l'interpolazione di stringa standard è che il tipo dei parametri non viene preso in considerazione. I valori sono convertiti in stringhe e le stringhe sono inserite. Non è disponibile alcuna opzione di formattazione. Ad esempio, non vi è modo di controllare il numero di cifre usato per rappresentare un valore a virgola mobile.
</testo_normale>
<testo_normale>
Un vantaggio, comunque, è che usando il metodo ${sbk}safe_substitute()${ebk}, è possibile evitare le eccezioni se non tutti i valori richiesti dal template sono passati come parametri.
</testo_normale>
<py_code>
import string

values = { 'var':'foo' }

t = string.Template("$var esiste ma $mancante non è fornito")

try:
    print 'TEMPLATE:', t.substitute(values)
except KeyError, err:
    print 'ERROR:', str(err)
    
print 'TEMPLATE:', t.safe_substitute(values)
</py_code>
<testo_normale>
Visto che non esiste alcun valore per 'mancante' nel dizionario dei valori, viene sollevata KeyError da ${sbk}substitute()${ebk}. Invece che sollevare l'errore ${sbk}safe_substitute()${ebk} lo cattura e lascia la variabile immutata nel testo.
</testo_normale>
<py_output>
$ python string_template_mancante.py
TEMPLATE: ERROR: 'mancante'
TEMPLATE: foo esiste ma $mancante non è fornito
</py_output>
<titolo_2>
Template avanzati
</titolo_2>
<testo_normale>
Se la sintassi predefinita di string.Template non è di proprio gradimento, si può modificarne il comportamento correggendo i modelli dell'espressione regolare che usa per trovare i nomi delle variabili nel corpo del template. Un modo semplice per fare questo è modificare gli attributi di classe ${sbk}delimiter${ebk} e ${sbk}idpattern${ebk}.
</testo_normale>
<py_code>
import string

class MyTemplate(string.Template):
    delimiter = '%'
    idpattern = '[a-z]+_[a-z]+'

t = MyTemplate('%% %with_underscore %notunderscored')
d = { 'with_underscore':'replaced', 
      'notunderscored':'not replaced',
      }

print t.safe_substitute(d)
</py_code>
<testo_normale>
In questo esempio, gli identificativi delle variabili devono includere un carattere di sottolineatura da qualche parte nel mezzo, così che ${sbk}%notunderscored${ebk} non sia sostituito.
</testo_normale>
<py_output>
$ python string_template_advanced.py
% replaced %notunderscored
</py_output>
<testo_normale>
Per modifiche più complesse si può sovrascrivere l'attributo pattern e definire una espressione regolare completamente nuova. Il modello fornito deve contenere 4 gruppi distinti per catturare il delimitatore da stampare letteralmente, il nome della variabile, una versione tra parentesi graffe del nome della variabile ed il delimitatore non valido.
</testo_normale>
<testo_normale>
Diamo un'occhiata al modello predefinito:
</testo_normale>
<py_code>
import string

t = string.Template('$var')
print t.pattern.pattern
</py_code>
<testo_normale>
Visto che $sbk t.pattern $ebk è una espressione regolare compilata, dobbiamo accedere al suo attributo pattern per vedere la stringa reale
</testo_normale>
<py_output>
$ python string_template_defaultpattern.py

    \$(?:
      (?P<escaped>\$) |   # Escape sequence of two delimiters
      (?P<named>[_a-z][_a-z0-9]*)      |   # delimiter and a Python identifier
      {(?P<braced>[_a-z][_a-z0-9]*)}   |   # delimiter and a braced identifier
      (?P<invalid>)              # Other ill-formed delimiter exprs
    )
</py_output>
<testo_normale>
Se si vuole creare un nuovo tipo di template usando, ad esempio, $sbk {{var}} $ebk come sintassi della variabile, potremmo usare un modello tipo questo:
</testo_normale>
<py_code>
import re
import string

class MyTemplate(string.Template):
    delimiter = '{{'
    pattern = r'''
    \{\{(?:
    (?P<escaped>\{\{)|
    (?P<named>[_a-z][_a-z0-9]*)\}\}|
    (?P<braced>[_a-z][_a-z0-9]*)\}\}|
    (?P<invalid>)
    )
    '''
    
t = MyTemplate('''
{{{{
{{var}}
''')

print 'MATCHES:', t.pattern.findall(t.template)
print 'SUBSTITUTED:', t.safe_substitute(var='replacement')
</py_code>
<testo_normale>
Dobbiamo comunque fornire i modelli del nome e del nome racchiuso tra graffe, anche se sono i medesimi. Ecco il risultato:
</testo_normale>
<py_output>
$ python string_template_newsyntax.py
MATCHES: [('{{', '', '', ''), ('', 'var', '', '')]
SUBSTITUTED:
{{
replacement
</py_output>
<titolo_2>
Funzioni deprecate
</titolo_2>
<testo_normale>
Per informazioni sulle funzioni deprecate spostate nelle classi string ed unicode, fare rifermento ai <a href='http://docs.python.org/lib/string-methods.html#string-methods'>Metodi Stringa</a> nel manuale.
</testo_normale>
<vedi_anche>
http://docs.python.org/lib/module-string.html|string|La documentazione standard della libreria per questo modulo
http://www.python.org/dev/peps/pep-0292|PEP 202|Sostituzioni di stringa più semplici
http://www.doughellmann.com/PyMOTW/articles/text_processing.html#article-text-processing|Strumenti per l'elaborazione del testo|
</vedi_anche>
<!--
<titolo_2>
</titolo_2>
<testo_normale>
</testo_normale>
<py_code>
</py_code>
<py_output>
</py_output>
-->
</documento_tradotto>
