<?xml version="1.0" encoding="Latin-1"?>
<categoria>accedere a file e directory </categoria><!-- # tag <descrizione> contiene le voci per la tabella di riepilogo iniziale -->
<!-- # tag <titolo_1> titolo principale -->
<!-- tag <testo_normale> contiene il testo normale dell'articolo -->
<!-- tag <titolo_2> contiene il testo per l'intestazione di un paragrafo -->
<!-- tag <py_code> contiene il testo che rappresenta delle istruzioni python -->
<!-- tag <py_output> contiene il testo che rappresenta l'output di uno script python -->
<!-- tag <vedi_anche> contiene il testo che rappresentano i riferimenti esterni -->
<!-- tag <lista> ogni riga all'interno del tag rappresenta una riga di una lista non ordinata'-->
<documento_tradotto>
<titolo_1>
fileinput - Elabora righe da flussi di input
</titolo_1>
<descrizione>
Crea programmi filtro da riga di comando per elaborare righe da flussi di input
1.5.2 e superiore
</descrizione>
<testo_normale>
Il modulo <strong>fileinput</strong> è una struttura per creare programmi da riga di comando per elaborare dei file di testo in modo "filtrato". 
</testo_normale>
<titolo_2>
Convertire file  M3U in RSS
</titolo_2>
<testo_normale>
Ad esempio l'applicazione <a href='http://www.doughellmann.com/projects/m3utorss/'>m3utorss</a> - scritta dall'autore dell'articolo originale Doug Hellmann, creata per il suo amico <a href='http://events.mediumloud.com/'> Patrick</a> (n.d.t.) - per convertire alcune incisioni demo in un formato che possa essere trasmesso in podcast.
</testo_normale>
<testo_normale>
Gli input per il programma sono uno o più file m3u contenenti l'elenco dei file mp3 da distribuire. L'output è un singolo file XML, che assomiglia ad un feed RSS (l'ouput viene scritto allo <em>stdout</em>, per semplicità). Per elaborare l'input, occorre iterare attraverso l' elenco di nomi di file e:    
</testo_normale>
<lista>
Aprire ciascun file.
Leggere ogni riga del file.
Identificare se la riga fa riferimento ad un file mp3.
In caso positivo, estrarre le informazioni dal file mp3 necessarie al feed RSS.
Stampare il risultato.
</lista>
<testo_normale>
Avrei potuto (Doug Hellmann - n.d.t.) scrivere la parte che gestisce i file manualmente. Non è così complicato, e con qualche test sono sicuro che avrei potuto anche gestire correttamente gli errori. Ma con il modulo <strong>fileinput</strong> non devo preoccuparmi di questo. Basta semplicemente scrivere qualcosa del tipo: 
</testo_normale>
<py_code>
for line in fileinput.input(sys.argv[1:]):
    mp3filename = line.strip()
    if not mp3filename or mp3filename.startswith('#'):
        continue
    item = SubElement(rss, 'item')
    title = SubElement(item, 'title')
    title.text = mp3filename
    encl = SubElement(item, 'enclosure', {'type':'audio/mpeg', 'url':mp3filename})
</py_code>
<testo_normale>
La funzione ${sbk}fileinput.input()${ebk} riceve come parametro una lista di nomi di file da esaminare. Se la lista è vuota, il modulo legge i dati dallo <em>standard input</em>. La funzione ritorna un <em>iteratore</em> che a sua volta restituisce le singole righe dal file che sta elaborando. Quindi, tutto quello che si deve fare è eseguire un ciclo per ogni riga, saltando quelle vuote ed i commenti, per trovare i riferimenti ai file mp3.
</testo_normale>
<testo_normale>
Ecco il listato completo del programma:
</testo_normale>
<py_code>
import fileinput
import sys
import time
from xml.etree.ElementTree import Element, SubElement, tostring
from xml.dom import minidom

# Impostazione dei nodi RSS e channel
rss = Element('rss', {'xmlns:dc':"http://purl.org/dc/elements/1.1/",
                      'version':'2.0',
                      })
channel = SubElement(rss, 'channel')
title = SubElement(channel, 'title')
title.text = 'Sample podcast feed'
desc = SubElement(channel, 'description')
desc.text = 'Generated for PyMOTW'
pubdate = SubElement(channel, 'pubDate')
pubdate.text = time.asctime()
gen = SubElement(channel, 'generator')
gen.text = 'http://www.doughellmann.com/PyMOTW/'

for line in fileinput.input(sys.argv[1:]):
    mp3filename = line.strip()
    if not mp3filename or mp3filename.startswith('#'):
        continue
    item = SubElement(rss, 'item')
    title = SubElement(item, 'title')
    title.text = mp3filename
    encl = SubElement(item, 'enclosure', {'type':'audio/mpeg', 'url':mp3filename})
        
rough_string = tostring(rss)
reparsed = minidom.parseString(rough_string)
print reparsed.toprettyxml(indent="  ")
</py_code>
<testo_normale>
ed il suo risultato:
</testo_normale>
<py_output>
$ python fileinput_example.py sample_data.m3u
&lt;?xml version="1.0" ?>
&lt;rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">
  &lt;channel>
    &lt;title>
      Sample podcast feed
    &lt;/title>
    &lt;description>
      Generated for PyMOTW
    &lt;/description>
    &lt;pubDate>
      Thu Mar 25 10:49:28 2010
    &lt;/pubDate>
    &lt;generator>
      http://www.doughellmann.com/PyMOTW/
    &lt;/generator>
  &lt;/channel>
  &lt;item>
    &lt;title>
      episode-one.mp3
    &lt;/title>
    &lt;enclosure type="audio/mpeg" url="episode-one.mp3"/>
  &lt;/item>
  &lt;item>
    &lt;title>
      episode-two.mp3
    &lt;/title>
    &lt;enclosure type="audio/mpeg" url="episode-two.mp3"/>
  &lt;/item>
&lt;/rss>    
</py_output>
<titolo_2>
Progressione dei Meta-dati    
</titolo_2>
<testo_normale>
Nell'esempio precedente, non interessa quale file o numero di riga si sta processando in fase di input. Per altri strumenti (ricerche sul tipo di grep, ad esempio) queste informazioni potrebbero interessare. Il modulo <strong>fileinput</strong>  include le funzioni per accedere a quelle informazioni (${sbk}filename()${ebk} restituisce il nome del file attualmente in lettura, ${sbk}filelineno()${ebk} restituisce il numero di righe lette nel file corrente, ${sbk}lineno()${ebk} restituisce il numero totale di righe lette, ecc.).
</testo_normale>
<py_code>
import fileinput
import re
import sys

pattern = re.compile(sys.argv[1])

for line in fileinput.input(sys.argv[2:]):
    if pattern.search(line):
        if fileinput.isstdin():
            fmt = '{lineno}:{line}'
        else:
            fmt = '{filename:<20}:{lineno}:{line}'
        print fmt.format(filename=fileinput.filename(),
                         lineno=fileinput.filelineno(),
                         line=line.rstrip())

</py_code>

<testo_normale>
Si può usare questo basico ciclo per la corrispondenza di stringhe per trovare le occorrenze di "fileinput" nel sorgente di questi esempi.
</testo_normale>
<py_output>
$ python fileinput_grep.py fileinput *.py
fileinput_change_subnet.py:10:import fileinput
fileinput_change_subnet.py:17:for line in fileinput.input(files, inplace=True):
fileinput_change_subnet_noisy.py:10:import fileinput
fileinput_change_subnet_noisy.py:18:for line in fileinput.input(files, inplace=True):
fileinput_change_subnet_noisy.py:19:    if fileinput.isfirstline():
fileinput_change_subnet_noisy.py:20:        sys.stderr.write('Started processing %s\n' % fileinput.filename())
fileinput_example.py:6:"""Example for fileinput module.
fileinput_example.py:10:import fileinput
fileinput_example.py:30:for line in fileinput.input(sys.argv[1:]):
fileinput_grep.py   :10:import fileinput
fileinput_grep.py   :16:for line in fileinput.input(sys.argv[2:]):
fileinput_grep.py   :18:        if fileinput.isstdin():
fileinput_grep.py   :22:        print fmt.format(filename=fileinput.filename(),
fileinput_grep.py   :23:                         lineno=fileinput.filelineno(),
</py_output>
<testo_normale>
Si può anche passare l'input attraverso <em>stdin</em>
</testo_normale>
<py_output>
$ cat *.py | python fileinput_grep.py fileinput
10:import fileinput
17:for line in fileinput.input(files, inplace=True):
29:import fileinput
37:for line in fileinput.input(files, inplace=True):
38:    if fileinput.isfirstline():
39:        sys.stderr.write('Started processing %s\n' % fileinput.filename())
51:"""Example for fileinput module.
55:import fileinput
75:for line in fileinput.input(sys.argv[1:]):
96:import fileinput
102:for line in fileinput.input(sys.argv[2:]):
104:        if fileinput.isstdin():
108:        print fmt.format(filename=fileinput.filename(),
109:                         lineno=fileinput.filelineno(),    
</py_output>
<titolo_2>
Filtrare sul Posto    
</titolo_2>
<testo_normale>
Un'altra comune operazione di elaborazione file è la modifica del contenuto. Ad esempio un file Unix <em>hosts</em> potrebbe avere bisogno di essere aggiornato se viene modificato l'intervallo di una subnet.
</testo_normale>
<py_output>
##
# Host Database
#
# localhost is used to configure the loopback interface
# when the system is booting.  Do not change this entry.
##
127.0.0.1       localhost
255.255.255.255 broadcasthost
::1             localhost 
fe80::1%lo0     localhost
172.16.177.128  hubert hubert.hellfly.net
172.16.177.132  cubert cubert.hellfly.net
172.16.177.136  zoidberg zoidberg.hellfly.net
</py_output>
<testo_normale>
Un modo sicuro per eseguire le modifiche automaticamente è creare un nuovo file basato sull'input, quindi rimpiazzare l'originale con la copia modificata. <strong>fileinput</strong> supporta questo automaticamente usando l'opzione <em>inplace</em>.
</testo_normale>
<py_code>
import fileinput
import sys

from_base = sys.argv[1]
to_base = sys.argv[2]
files = sys.argv[3:]

for line in fileinput.input(files, inplace=True):
    line = line.rstrip().replace(from_base, to_base)
    print line
</py_code>
<py_output>
$ python fileinput_change_subnet.py 172.16.177 172.16.178 etc_hosts.txt
</py_output>
<testo_normale>
Sebbene lo script usi ${sbk}print${ebk}, non viene prodotto alcun output verso <em>stdout</em> perchè <strong>fileinput</strong> mappa <em>stdout</em> al file che si sta sovrascrivendo.
</testo_normale>
<py_output>
##
# Host Database
#
# localhost is used to configure the loopback interface
# when the system is booting.  Do not change this entry.
##
127.0.0.1       localhost
255.255.255.255 broadcasthost
::1             localhost
fe80::1%lo0     localhost
172.16.178.128  hubert hubert.hellfly.net
172.16.178.132  cubert cubert.hellfly.net
172.16.178.136  zoidberg zoidberg.hellfly.net
</py_output>
<testo_normale>
Prima che inizi l'elaborazione, un file di backup viene creato usando il nome originale più ${sbk}.bak${ebk}. Il file di backup viene rimosso quando viene chiuso l'input.
</testo_normale>
<py_code>
import fileinput
import glob
import sys

from_base = sys.argv[1]
to_base = sys.argv[2]
files = sys.argv[3:]

for line in fileinput.input(files, inplace=True):
    if fileinput.isfirstline():
        sys.stderr.write('Iniziata elaborazione %s\n' % fileinput.filename())
        sys.stderr.write('Contenuto della directory: %s\n' % glob.glob('etc_hosts.txt*'))
    line = line.rstrip().replace(from_base, to_base)
    print line

sys.stderr.write('Finita elaborazione\n')
sys.stderr.write('Contenuto della directory: %s\n' % glob.glob('etc_hosts.txt*'))
</py_code>
<py_output>
$ python fileinput_change_subnet_noisy.py 172.16.177 172.16.178 etc_hosts.txt
Iniziata elaborazione etc_hosts.txt
Contenuto della directory: ['etc_hosts.txt', 'etc_hosts.txt.bak']
Finita elaborazione
Contenuto della directory: ['etc_hosts.txt']
</py_output>
<vedi_anche>
http://docs.python.org/library/fileinput.html|fileinput|La documentazione della libreria standard per questo modulo.
http://events.mediumloud.com/|Patrick Bryant|Cantautore con base in Atlanta.
http://www.doughellmann.com/projects/m3utorss|m3utorss|Script per convertire file m3u con elenchi di MP3 in un file RSS adatto all'uso come feed di podcast.
xmltree.html#creare_documenti|Creare documenti XML|Maggiori dettagli sull'uso di ElementTree per produrre XML
http://www.doughellmann.com/PyMOTW/articles/file_access.html#article-file-access|File Access|Altri moduli per lavorare con i file
http://www.doughellmann.com/PyMOTW/articles/text_processing.html#article-text-processing|Text Processing Tools|Altri moduli per lavorare con il testo
</vedi_anche>
</documento_tradotto>
